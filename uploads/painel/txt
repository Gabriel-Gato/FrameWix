import React, { createContext, useEffect, useState } from "react";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [logado, setLogado] = useState(false);
  const [usuario, setUsuario] = useState(null);

  useEffect(() => {
    const token = localStorage.getItem("token");
    const email = localStorage.getItem("userEmail");
    const nome = localStorage.getItem("userNome");
    const id = localStorage.getItem("userId");
    const role = localStorage.getItem("userRole");

    if (token && email) {
      setLogado(true);
      setUsuario({ id, email, nome, role });
    }
  }, []);

  const login = (userData) => {
    localStorage.setItem("token", "token-ficticio");
    localStorage.setItem("userEmail", userData.email);
    localStorage.setItem("userNome", userData.nome);
    localStorage.setItem("userId", userData.id);
    localStorage.setItem("userRole", userData.artista ? "artista" : "cliente");

    setUsuario({
      id: userData.id,
      email: userData.email,
      nome: userData.nome,
      role: userData.artista ? "artista" : "cliente",
    });
    setLogado(true);
  };

  const logout = () => {
    localStorage.clear();
    setLogado(false);
    setUsuario(null);
  };

  return (
    <AuthContext.Provider value={{ logado, usuario, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

----------------------------------------------------------------

import styles from "./Navbar.module.css";
import logo from "../../assets/imgs/logo_white.png";
import logoRoxo from "../../assets/imgs/logo_purple.png";
import buscarIcon from "../../assets/imgs/buscar_icon.png";
import MensagensIcon from "../../assets/imgs/mensagens_icon.png";
import MensagensIconBranco from "../../assets/imgs/mensagens_icon_branco.png";
import PerfilIcon from "../../assets/imgs/pro_icon.png";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { useContext, useState, useRef, useEffect } from "react";
import { AuthContext } from "../../context/AuthContext";

function Navbar() {
  const location = useLocation();
  const navigate = useNavigate();
  const { logado, logout, usuario } = useContext(AuthContext);
  const role = usuario?.role || "usuario";
  const [open, setOpen] = useState(false);
  const menuRef = useRef();
  const [clientColor, setClientColor] = useState("");
  const [imagemPerfil, setImagemPerfil] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    if (role === "cliente") {
      // Gerar uma vez por sessão
      const storedColor = sessionStorage.getItem("clientColor");
      if (storedColor) {
        setClientColor(storedColor);
      } else {
        const newColor = `hsl(${Math.floor(Math.random() * 360)}, 70%, 60%)`;
        setClientColor(newColor);
        sessionStorage.setItem("clientColor", newColor);
      }
    }
  }, [role]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  useEffect(() => {
    const fetchImagemPerfil = async () => {
      if (usuario?.role === "artista") {
        try {
          const response = await fetch(
            `http://localhost:8080/api/clientes/email/${usuario.email}`
          );
          if (response.ok) {
            const data = await response.json();
            if (data.imagem) {
              setImagemPerfil(
                `http://localhost:8080/api/clientes/imagem/${data.imagem}`
              );
            }
          } else {
            console.error("Erro ao buscar dados do perfil.");
          }
        } catch (error) {
          console.error("Erro ao buscar imagem de perfil:", error);
        }
      }
    };

    fetchImagemPerfil();
  }, [usuario]);

  const isLandingPage = location.pathname === "/";
  const navbarClass = isLandingPage ? styles.navbarRoxo : styles.navbarBranco;

  return (
    <nav className={navbarClass}>
      <section className={styles.navbar_container}>
        <div className={styles.logo_container}>
          <Link to="/" className={styles.logoLink}>
            <img
              src={isLandingPage ? logo : logoRoxo}
              alt="Logo"
              className={styles.logo}
            />
            <h1
              className={`${styles.logoTitle} ${
                isLandingPage ? styles.corBranco : styles.corRoxo
              }`}
            >
              FrameWix
            </h1>
          </Link>
        </div>

        {!isLandingPage && (
          <div className={styles.pesquisar}>
            <img
              src={buscarIcon}
              alt="Buscar icon"
              className={styles.buscar_icon}
            />
            <input
              type="text"
              placeholder="Descreva sua comissão"
              className={styles.pesquisar_input}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  e.preventDefault();
                  const termo = searchTerm.trim();
                  if (termo === "") {
                    // Se o campo estiver vazio, redireciona para /artistas_clientes?busca=
                    navigate(`/artistas_clientes?busca=`);
                  } else {
                    // Caso contrário, mantém o termo de busca
                    navigate(
                      `/artistas_clientes?busca=${encodeURIComponent(termo)}`
                    );
                  }
                }
              }}
            />
          </div>
        )}

        <div className={styles.button_container}>
          {!logado ? (
            <>
              <Link to="/login" className={styles.loginButton}>
                Entre
              </Link>
              <Link
                to="/cadastro"
                className={
                  isLandingPage
                    ? styles.registerButton
                    : styles.registerButton_roxo
                }
              >
                Cadastrar-se
              </Link>
            </>
          ) : (
            <section className={styles.nav_cli_container}>
              {/* Ícone de mensagens */}
              <Link
                to="/mensagens"
                className={
                  isLandingPage ? styles.msg_icon_branco : styles.msg_icon_roxo
                }
              >
                <img
                  src={isLandingPage ? MensagensIconBranco : MensagensIcon}
                  alt="Ícone de mensagens"
                  className={styles.icon_msg}
                />
              </Link>

              {/* Se for cliente, mostra botão de "Postar" */}
              {role === "cliente" && (
                <Link
                  to="/post"
                  className={
                    isLandingPage
                      ? styles.post_btn_branco
                      : styles.post_btn_roxo
                  }
                >
                  <i
                    className={`far fa-plus ${
                      isLandingPage ? styles.iconAddBranco : styles.iconAddRoxo
                    }`}
                  ></i>
                  <span
                    className={
                      isLandingPage ? styles.textoBranco : styles.textoRoxo
                    }
                  >
                    Post
                  </span>
                </Link>
              )}

              {/* Se for artista, mostra botão de "Portfólio" */}
              {role === "artista" && (
                <Link
                  to="/portfolio"
                  className={
                    isLandingPage
                      ? styles.post_btn_branco
                      : styles.post_btn_roxo
                  }
                >
                  <span
                    className={
                      isLandingPage ? styles.textoBranco : styles.textoRoxo
                    }
                  >
                    Portfólio
                  </span>
                </Link>
              )}

              {/* Botão de Painel (para ambos) */}
              <Link
                to={role === "artista" ? "/painel_artista" : "/painel_cliente"}
                className={
                  isLandingPage
                    ? styles.painel_btn_branco
                    : styles.painel_btn_roxo
                }
              >
                <span
                  className={
                    isLandingPage ? styles.textoBranco : styles.textoRoxo
                  }
                >
                  Painel
                </span>
              </Link>

              {/* Menu do perfil com opções adicionais */}
              <div
                className={
                  isLandingPage
                    ? styles.perfilWrapper
                    : styles.perfilWrapper_roxo
                }
                ref={menuRef}
              >
                <div
                  className={styles.perfil}
                  onClick={() => setOpen(!open)}
                  title="Perfil"
                >
                  {role === "artista" ? (
                    <img
                      src={imagemPerfil || PerfilIcon}
                      alt="Perfil Artista"
                      className={styles.avatar}
                    />
                  ) : (
                    <div
                      className={styles.perfilArtist}
                      style={{ backgroundColor: clientColor }}
                    ></div>
                  )}
                </div>

                {open && (
                  <div className={styles.perfilMenu}>
                    <Link to="/conta" className={styles.conta_btn}>
                      Perfil
                    </Link>
                    <Link to="/conta/suporte" className={styles.conta_btn}>
                      Ajuda
                    </Link>
                    <button
                      onClick={() => {
                        logout();
                        setOpen(false);
                        setTimeout(() => {
                          navigate("/");
                          setTimeout(() => {
                            window.location.reload();
                          }); // espera 100ms após a navegação para recarregar
                        }, 600);
                      }}
                    >
                      Sair
                    </button>
                  </div>
                )}
              </div>
            </section>
          )}
        </div>
      </section>
    </nav>
  );
}

export default Navbar;

------------------------------------------------------------
import { useEffect, useState, useRef } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { useContext } from "react";
import { AuthContext } from "../../context/AuthContext";
import { urlToFile } from "../../utils/fileUtils";

import SidebarMensagens from "../SidebarMensagens/SidebarMensagens";
import styles from "./Mensagens.module.css";

const API = "http://localhost:8080";

export default function Mensagens() {
  const { usuario } = useContext(AuthContext);
  /* ---------- states ---------- */
  const [conversas, setConversas] = useState([]);
  const [conversaAtivaId, setConversaAtivaId] = useState(null);
  const [mensagens, setMensagens] = useState([]);
  const [novaMensagem, setNovaMensagem] = useState("");
  const [solicitacaoCliente, setSolicitacaoCliente] = useState(null);
  const [portfolioArtista, setPortfolioArtista] = useState([]);
  const [imagensDestaque, setImagensDestaque] = useState([]);
  const [enviando, setEnviando] = useState(false);


  const artista = usuario?.artista;

  const location = useLocation();
  const navigate = useNavigate();
  const bottomRef = useRef(null);

  const comentarioId = parseInt(new URLSearchParams(location.search).get("id"), 10);
  const meuId = usuario?.id;

  const mapMensagemParaAutor = (msg) => {
    const isRemetente = msg.remetente.id === meuId;
    if (artista) {
      return isRemetente ? "eu" : "outro";
    } else {
      return isRemetente ? "outro" : "eu";
    }
  };

  const handleSelecionarConversa = (id) => {
      setConversaAtivaId(id);
      navigate(`/mensagens?id=${id}`); // Atualiza a URL para refletir a conversa ativa
    };

const handleCancelarSolicitacao = async () => {
  if (!conversaAtivaId) return;

  const confirmar = window.confirm("Tem certeza que deseja cancelar a solicitação e apagar a conversa?");
  if (!confirmar) return;

  try {
    const res = await fetch(`${API}/api/mensagemchat/conversa/${conversaAtivaId}`, {
      method: "DELETE"
    });

    if (!res.ok) throw new Error("Erro ao deletar a conversa");

    // Limpa o estado
    setMensagens([]);
    setConversaAtivaId(null);
    setSolicitacaoCliente(null);

    // Atualiza a lista de conversas
    const novasConversas = conversas.filter(c => c.id !== conversaAtivaId);
    setConversas(novasConversas);

    navigate("/mensagens");
  } catch (err) {
    console.error(err);
    alert("Erro ao cancelar a solicitação.");
  }
};


useEffect(() => {
    const params = new URLSearchParams(location.search);
    const id = parseInt(params.get("id"), 10);
    if (id && conversaAtivaId !== id) {
      setConversaAtivaId(id);
    }
  }, [location.search, conversaAtivaId]);

  /* ---------- effects ---------- */
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const id = parseInt(params.get("id"), 10);
    if (id && !conversaAtivaId) {
      setConversaAtivaId(id);
    }
  }, [location.search]);

  useEffect(() => {
    const buscarComentario = async () => {
      if (!comentarioId) return;
      try {
        const res = await fetch(`${API}/api/comentariocli/${comentarioId}`);
        if (!res.ok) throw new Error("Erro ao buscar comentário");

        const data = await res.json();
        setSolicitacaoCliente({
          nomeUsuario: data.cliente.nome,
          descricao: data.descricao,
          clienteId: data.cliente.id
        });

      } catch (err) {
        console.error(err);
      }
    };

    buscarComentario();
  }, [comentarioId]);

  useEffect(() => {
    const buscarPortfoliosComImagens = async () => {
      try {
        const res = await fetch(`${API}/api/portfolio/artista/${meuId}`);
        if (!res.ok) throw new Error("Erro ao buscar portfólios");
        const portfolios = await res.json();

        const portfoliosComImagens = await Promise.all(
          portfolios.map(async (portfolio) => {
            const resImgs = await fetch(`${API}/api/portfolioimgs/por-portfolio/${portfolio.id}`);
            const imgs = resImgs.ok ? await resImgs.json() : [];
            return { ...portfolio, imagens: imgs };
          })
        );

        setPortfolioArtista(portfoliosComImagens);
        const imagensSelecionadas = selecionarImagensAleatorias(portfoliosComImagens);
        setImagensDestaque(imagensSelecionadas);
      } catch (err) {
        console.error(err);
      }
    };

    if (meuId) buscarPortfoliosComImagens();
  }, [meuId]);

  useEffect(() => {
    const fetchConversas = async () => {
      try {
        const res = await fetch(`${API}/api/mensagemchat/usuario/${meuId}`);
        if (!res.ok) throw new Error("Erro ao buscar conversas");

        const data = await res.json();
        setConversas(data);
        if (!conversaAtivaId && data.length > 0) {
          setConversaAtivaId(data[0].id);
        }
      } catch (err) {
        console.error(err);
      }
    };

    if (meuId) fetchConversas();
  }, [meuId]);

  /* ---------- functions ---------- */
  const isImagem = (texto) =>
    typeof texto === "string" &&
    (texto.endsWith(".jpg") ||
     texto.endsWith(".jpeg") ||
     texto.endsWith(".png") ||
     texto.endsWith(".webp"));

  const buscarMensagens = async (idConversa) => {
    try {
      const res = await fetch(`${API}/api/mensagemchat/conversa/${idConversa}`);
      if (!res.ok) throw new Error("Falha ao buscar mensagens");
      const data = await res.json();

      setMensagens(
        data.map((msg) => ({
          id: msg.id,
          texto: msg.imagem ?? msg.mensagem,
          autor: msg.remetente.id === meuId ? "eu" : "outro",
        }))
      );
    } catch (err) {
      console.error(err);
    }
  };

  const enviarMensagem = async () => {
    if (!novaMensagem.trim() || enviando) return;

    if (!meuId || !solicitacaoCliente?.clienteId) {
      alert("Dados incompletos para enviar mensagem");
      return;
    }

    setEnviando(true);
    try {
      // Verifica se temos uma conversa, se não, cria uma nova
      let conversaId = conversaAtivaId;
      if (!conversaAtivaId) {
        const resConversa = await fetch(`${API}/api/conversas`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            usuario1Id: meuId,
            usuario2Id: solicitacaoCliente.clienteId
          })
        });

        if (!resConversa.ok) throw new Error("Falha ao criar conversa");
        const novaConversa = await resConversa.json();
        conversaId = novaConversa.id;
        setConversaAtivaId(novaConversa.id);
      }

      const dto = {
        remetenteId: meuId,
        destinatarioId: solicitacaoCliente.clienteId,
        conversaId: conversaId,
        mensagem: novaMensagem,
        imagem: null,
      };

      const res = await fetch(`${API}/api/mensagemchat`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(dto),
      });

      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.message || "Falha ao enviar mensagem");
      }

      const salvo = await res.json();
      setMensagens((prev) => [
        ...prev,
        {
          id: salvo.id,
          texto: salvo.mensagem,
          autor: mapMensagemParaAutor({ remetente: { id: meuId } }),
        },
      ]);

      setNovaMensagem("");

      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    } catch (err) {
      console.error("Erro detalhado:", err);
      alert(`Erro ao enviar mensagem: ${err.message}`);
    } finally {
      setEnviando(false);
    }
  };

  const handleUploadImagem = async (e) => {
    const file = e.target.files[0];
    if (!file || enviando) return;

    if (!meuId || !solicitacaoCliente?.clienteId) {
      alert("Dados incompletos para enviar imagem");
      return;
    }

    setEnviando(true);
    try {
      let conversaId = conversaAtivaId;
      if (!conversaAtivaId) {
        const resConversa = await fetch(`${API}/api/conversas`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            usuario1Id: meuId,
            usuario2Id: solicitacaoCliente.clienteId
          })
        });

        if (!resConversa.ok) throw new Error("Falha ao criar conversa");
        const novaConversa = await resConversa.json();
        conversaId = novaConversa.id;
        setConversaAtivaId(novaConversa.id);
      }

      const dto = {
        remetenteId: meuId,
        destinatarioId: solicitacaoCliente.clienteId,
        conversaId: conversaId,
        mensagem: "",
        imagem: null,
      };

      const resMsg = await fetch(`${API}/api/mensagemchat`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(dto),
      });
      if (!resMsg.ok) throw new Error("Falha ao criar mensagem");

      const msgCriada = await resMsg.json();

      const fd = new FormData();
      fd.append("imagem", file);

      const resImg = await fetch(
        `${API}/api/mensagemchat/${msgCriada.id}/imagem`,
        { method: "POST", body: fd }
      );
      if (!resImg.ok) throw new Error("Falha ao enviar imagem");

      const msgComImagem = await resImg.json();

      setMensagens((prev) => [
        ...prev,
        {
          id: msgComImagem.id,
          texto: msgComImagem.imagem,
          autor: mapMensagemParaAutor({ remetente: { id: meuId } }),
        },
      ]);


      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    } catch (err) {
      console.error(err);
      alert("Erro ao enviar imagem.");
    } finally {
      e.target.value = "";
      setEnviando(false);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      enviarMensagem();
    }
  };

  function selecionarImagensAleatorias(portfolios, quantidade = 4) {
    const todasImagens = portfolios.flatMap((p) =>
      p.imagens.map((img) => ({ ...img, tipo_arte: p.tipo_arte }))
    );

    const imagensUnicasPorTipo = {};
    todasImagens.forEach((img) => {
      if (!imagensUnicasPorTipo[img.tipo_arte]) {
        imagensUnicasPorTipo[img.tipo_arte] = [];
      }
      imagensUnicasPorTipo[img.tipo_arte].push(img);
    });

    let imagensSelecionadas = Object.values(imagensUnicasPorTipo)
      .flatMap((lista) => lista.slice(0, 1));

    while (imagensSelecionadas.length < quantidade && todasImagens.length > 0) {
      const restante = todasImagens.filter(
        (img) => !imagensSelecionadas.includes(img)
      );
      if (restante.length === 0) break;
      const rand = restante[Math.floor(Math.random() * restante.length)];
      imagensSelecionadas.push(rand);
    }

    return imagensSelecionadas.slice(0, quantidade);
  }

  /* ---------- polling a cada 3s ---------- */
  useEffect(() => {
    if (conversaAtivaId) {
      buscarMensagens(conversaAtivaId);

      const t = setInterval(() => {
        if (conversaAtivaId && document.visibilityState === "visible") {
          buscarMensagens(conversaAtivaId);
        }
      }, 1000);

      return () => clearInterval(t);
    }
  }, [conversaAtivaId]);

  /* ---------- render ---------- */
  return (
    <div className={styles.containerMensagens}>
      <SidebarMensagens
        conversas={conversas}
                onSelecionarConversa={handleSelecionarConversa}
                conversaAtivaId={conversaAtivaId}
      />

      <div className={styles.chatBox}>
        {conversaAtivaId ? (
          <>
            <div className={styles.chatBody}>
              <section className={styles.reply_container}>
               <h5> Post Aceito<i className='fas fa-reply'></i></h5>


                {solicitacaoCliente && (
                  <div className={styles.solicitacaoInfo}>
                    <h4>{solicitacaoCliente.nomeUsuario}</h4>
                    <p>{solicitacaoCliente.descricao}</p>
                    <button className={styles.cancel_btn} onClick={handleCancelarSolicitacao}>
                      Cancelar solicitação
                    </button>
                  </div>
                )}

                {imagensDestaque.length > 0 && (
                  <div className={styles.portfolioPreviewDestaque}>
                    <h4>Portfolio</h4>
                    <div className={styles.imagensLinha}>
                      {imagensDestaque.map((img) => (
                        <img
                          key={img.id}
                          src={`${API}/api/portfolioimgs/imagem/${img.imagem}`}
                          alt="Arte do portfólio"
                          className={styles.imgPortfolio}
                        />
                      ))}
                    </div>
                  </div>
                )}
              </section>

             {mensagens.map((msg) => {
               // Se usuário é artista, "eu" é remetente (mensagem enviada por ele)
               // Se usuário NÃO é artista, "eu" é destinatário, então quem enviou é "outro"
               const ehRemetente = (artista && msg.autor === "eu") || (!artista && msg.autor !== "eu");

               return (
                 <div
                   key={msg.id}
                   className={ehRemetente ? styles.mensagemArtista : styles.mensagemCliente}
                 >
                   {isImagem(msg.texto) ? (
                     <img
                       src={`${API}/uploads/mensagens/${msg.texto}`}
                       alt="Imagem enviada"
                       style={{ maxWidth: "200px", borderRadius: "10px" }}
                     />
                   ) : (
                     <p>{msg.texto}</p>
                   )}
                 </div>
               );
             })}

              <div ref={bottomRef} />
            </div>

            <div className={styles.inputBox}>
              <label className={styles.clipIcon}>
                <i className="fa-solid fa-paperclip"></i>
                <input
                  type="file"
                  onChange={handleUploadImagem}
                  style={{ display: "none" }}
                  disabled={enviando}
                />
              </label>

              <input
                type="text"
                value={novaMensagem}
                onChange={(e) => setNovaMensagem(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="Enviar mensagem..."
                disabled={enviando}
              />

              <button onClick={enviarMensagem} disabled={enviando}>
                {enviando ? (
                  <i className="fas fa-spinner fa-spin"></i>
                ) : (
                  <i className="fas fa-location-arrow"></i>
                )}
              </button>
            </div>
          </>
        ) : (
          <div className={styles.nenhumaConversa}>Selecione uma conversa</div>
        )}
      </div>
    </div>
  );
}
--------------------------------------------------------------------------


.containerMensagens {
  display: flex;
  height: 80vh; /* Altura fixa */
  max-height: 80vh; /* Garante que não ultrapasse */
  width: 100%;
  background-color: white;
  overflow: hidden; /* Impede qualquer scroll aqui */
}

.chatBox {
background-color: white;
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 20px;
  border-left: 1px solid #ddd;
  min-height: 0;
}

.chatBody {
  flex: 1;
  overflow-y: auto;
  padding: 10px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  min-height: 0;
}

/* Mensagens do cliente (usuário logado) */
.mensagemCliente {
  align-self: flex-end;
  max-width: 70%;
  background-color: gray;
  color: #333;
  padding: 10px 15px;
  border-radius: 18px 18px 0 18px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  word-wrap: break-word;
}

/* Mensagens do artista (outro usuário) */
.mensagemArtista {
  align-self: flex-start;
  max-width: 70%;
  background-color: #ffffff;
  color: #6a1b9a;
  padding: 10px 15px;
  border-radius: 18px 18px 18px 0;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  word-wrap: break-word;
}
.inputBox {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: row;
  gap: 10px;
  padding: 10px;
  border-top: 1px solid #ddd;
  min-height: 0;
}

.inputBox input[type="text"] {
  flex: 1;
  padding: 12px 15px;
  border: none;
  outline: none;
  background-color: #D9D9D9;
  min-width: 0;
}

.clipIcon {
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 20px;
  color: #4D4D4D;
}

.clipIcon:hover {
  color: gray;
}

.inputBox button {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: transparent;
  color: #4D4D4D;
  font-size: 20px;
  border: none;
  cursor: pointer;
  padding: 5px;
}

.inputBox button:hover {
  color: gray;
}


.nenhumaConversa {
  text-align: center;
  color: #888;
  margin-top: 50px;
  font-size: 1.1rem;
}

.reply_container {
  width: 30%;
}

.solicitacaoInfo {
  background-color: #F1F1F1;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 16px;
  box-shadow: 0 6px 5px rgba(0, 0, 0, 0.11);
}

.cancel_btn {
  background-color: #CA3333;
}

.portfolioPreviewDestaque {
display: flex;
flex-direction: column;
  margin-top: 16px;
  box-shadow: 0 6px 5px rgba(0, 0, 0, 0.11);

  p {
  color: #383838;
  }

  h4 {
  background-color: #744909;
  color: white;
  width: fit-content;
  padding: 0.5rem 1rem 0.2rem 1rem;
  }
}

.imagensLinha {
  display: flex;
  gap: 12px;
  overflow-x: auto;
  padding: 8px 0;
}

.imgPortfolio {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}
.mensagemEu {
  text-align: right;
  background-color: #d0f0c0;
  align-self: flex-end;
  padding: 8px;
  border-radius: 10px;
  margin: 5px;
  max-width: 60%;
}

.mensagemOutro {
  text-align: left;
  background-color: #f0f0f0;
  align-self: flex-start;
  padding: 8px;
  border-radius: 10px;
  margin: 5px;
  max-width: 60%;
}


--------------------------------------------------------------------------
import { useEffect, useState, useRef } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { useContext } from "react";
import { AuthContext } from "../../context/AuthContext";
import { urlToFile } from "../../utils/fileUtils";

import SidebarMensagens from "../SidebarMensagens/SidebarMensagens";
import styles from "./Mensagens.module.css";

const API = "http://localhost:8080";

export default function Mensagens() {
  const { usuario } = useContext(AuthContext);
  /* ---------- states ---------- */
  const [conversas, setConversas] = useState([]);
  const [conversaAtivaId, setConversaAtivaId] = useState(null);
  const [mensagens, setMensagens] = useState([]);
  const [novaMensagem, setNovaMensagem] = useState("");
  const [solicitacaoCliente, setSolicitacaoCliente] = useState(null);
  const [portfolioArtista, setPortfolioArtista] = useState([]);
  const [imagensDestaque, setImagensDestaque] = useState([]);
  const [enviando, setEnviando] = useState(false);
  const [conversaAtiva, setConversaAtiva] = useState(null);

  const artista = usuario?.artista;

  const location = useLocation();
  const navigate = useNavigate();
  const bottomRef = useRef(null);

  const comentarioId = parseInt(new URLSearchParams(location.search).get("id"), 10);
  const meuId = usuario?.id;

  const getDestinatarioId = () => {
    if (!conversaAtiva) return null;

    const { usuario1, usuario2 } = conversaAtiva;
    if (!usuario1 || !usuario2) return null;

    return usuario1.id === meuId ? usuario2.id : usuario1.id;
  };



  const mapMensagemParaAutor = (msg) => {
    const isRemetente = msg.remetente.id === meuId;
    if (artista) {
      return isRemetente ? "eu" : "outro";
    } else {
      return isRemetente ? "outro" : "eu";
    }
  };

  const handleSelecionarConversa = (id) => {
      setConversaAtivaId(id);
      navigate(`/mensagens?id=${id}`); // Atualiza a URL para refletir a conversa ativa
    };

const handleCancelarSolicitacao = async () => {
  if (!conversaAtivaId) return;

  const confirmar = window.confirm("Tem certeza que deseja cancelar a solicitação e apagar a conversa?");
  if (!confirmar) return;

  try {
    const res = await fetch(`${API}/api/mensagemchat/conversa/${conversaAtivaId}`, {
      method: "DELETE"
    });

    if (!res.ok) throw new Error("Erro ao deletar a conversa");

    // Limpa o estado
    setMensagens([]);
    setConversaAtivaId(null);
    setSolicitacaoCliente(null);

    // Atualiza a lista de conversas
    const novasConversas = conversas.filter(c => c.id !== conversaAtivaId);
    setConversas(novasConversas);

    navigate("/mensagens");
  } catch (err) {
    console.error(err);
    alert("Erro ao cancelar a solicitação.");
  }
};


useEffect(() => {
    const params = new URLSearchParams(location.search);
    const id = parseInt(params.get("id"), 10);
    if (id && conversaAtivaId !== id) {
      setConversaAtivaId(id);
    }
  }, [location.search, conversaAtivaId]);

  /* ---------- effects ---------- */
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const id = parseInt(params.get("id"), 10);
    if (id && !conversaAtivaId) {
      setConversaAtivaId(id);
    }
  }, [location.search]);

  useEffect(() => {
    const buscarComentario = async () => {
      if (!comentarioId) return;
      try {
        const res = await fetch(`${API}/api/comentariocli/${comentarioId}`);
        if (!res.ok) throw new Error("Erro ao buscar comentário");

        const data = await res.json();
        setSolicitacaoCliente({
          nomeUsuario: data.cliente.nome,
          descricao: data.descricao,
          clienteId: data.cliente.id
        });

      } catch (err) {
        console.error(err);
      }
    };

    buscarComentario();
  }, [comentarioId]);

  const fetchConversaAtiva = async () => {
    if (!conversaAtivaId) return;
    try {
      const res = await fetch(`${API}/api/mensagemchat/conversa/${conversaAtivaId}`);
      if (!res.ok) throw new Error("Erro ao buscar mensagens da conversa");
      const data = await res.json(); // array de mensagens

      setMensagens(data);

      // Extrair usuário1 e usuário2 a partir das mensagens (assumindo que todas são da mesma conversa)
      if (data.length > 0) {
        const usuario1 = data[0].remetente;
        const usuario2 = data[0].destinatario;
        setConversaAtiva({ usuario1, usuario2, id: conversaAtivaId });
      } else {
        setConversaAtiva(null);
      }
    } catch (err) {
      console.error(err);
    }
  };


useEffect(() => {
  fetchConversaAtiva();
}, [conversaAtivaId]);


  useEffect(() => {
    const fetchConversas = async () => {
      try {
        const res = await fetch(`${API}/api/mensagemchat/usuario/${meuId}`);
        if (!res.ok) throw new Error("Erro ao buscar conversas");

        const data = await res.json();
        setConversas(data);
        if (!conversaAtivaId && data.length > 0) {
          setConversaAtivaId(data[0].id);
        }
      } catch (err) {
        console.error(err);
      }
    };

    if (meuId) fetchConversas();
  }, [meuId]);

  /* ---------- functions ---------- */
  const isImagem = (texto) =>
    typeof texto === "string" &&
    (texto.endsWith(".jpg") ||
     texto.endsWith(".jpeg") ||
     texto.endsWith(".png") ||
     texto.endsWith(".webp"));

  const buscarMensagens = async (idConversa) => {
    try {
      const res = await fetch(`${API}/api/mensagemchat/conversa/${idConversa}`);
      if (!res.ok) throw new Error("Falha ao buscar mensagens");
      const data = await res.json();

      setMensagens(
        data.map((msg) => ({
          id: msg.id,
          texto: msg.imagem ?? msg.mensagem,
          autor: msg.remetente.id === meuId ? "eu" : "outro",
        }))
      );
    } catch (err) {
      console.error(err);
    }
  };


  const enviarMensagem = async () => {
    if (!novaMensagem.trim() || enviando) return;

    const destinatarioId = getDestinatarioId();
    if (!meuId || !destinatarioId) {
      alert("Dados incompletos para enviar mensagem");
      return;
    }

    setEnviando(true);
    try {
      let conversaId = conversaAtivaId;
      if (!conversaAtivaId) {
        const resConversa = await fetch(`${API}/api/mensagemchat`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            usuario1Id: meuId,
            usuario2Id: destinatarioId
          })
        });

        if (!resConversa.ok) throw new Error("Falha ao criar conversa");
        const novaConversa = await resConversa.json();
        conversaId = novaConversa.id;
        setConversaAtivaId(novaConversa.id);
      }

      const dto = {
        remetenteId: meuId,
        destinatarioId,
        conversaId,
        mensagem: novaMensagem,
        imagem: null,
      };
console.log("DTO a enviar:", dto);

      const res = await fetch(`${API}/api/mensagemchat`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(dto),
      });

      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.message || "Falha ao enviar mensagem");
      }

      const salvo = await res.json();
      setMensagens((prev) => [
        ...prev,
        {
          id: salvo.id,
          texto: salvo.mensagem,
          autor: mapMensagemParaAutor({ remetente: { id: meuId } }),
        },
      ]);

      setNovaMensagem("");
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    } catch (err) {
      console.error("Erro detalhado:", err);
      alert(`Erro ao enviar mensagem: ${err.message}`);
    } finally {
      setEnviando(false);
    }
  };


 const handleUploadImagem = async (e) => {
   const file = e.target.files[0];
   if (!file || enviando) return;

   const destinatarioId = getDestinatarioId();

   if (!meuId || !destinatarioId) {
     alert("Dados incompletos para enviar imagem");
     return;
   }

   setEnviando(true);
   try {
     let conversaId = conversaAtivaId;
     if (!conversaAtivaId) {
       const resConversa = await fetch(`${API}/api/mensagemchat`, {
         method: "POST",
         headers: { "Content-Type": "application/json" },
         body: JSON.stringify({
           usuario1Id: meuId,
           usuario2Id: destinatarioId
         })
       });

       if (!resConversa.ok) throw new Error("Falha ao criar conversa");
       const novaConversa = await resConversa.json();
       conversaId = novaConversa.id;
       setConversaAtivaId(novaConversa.id);
     }

     const dto = {
       remetenteId: meuId,
       destinatarioId,
       conversaId,
       mensagem: "",
       imagem: null,
     };

     const resMsg = await fetch(`${API}/api/mensagemchat`, {
       method: "POST",
       headers: { "Content-Type": "application/json" },
       body: JSON.stringify(dto),
     });
     if (!resMsg.ok) throw new Error("Falha ao criar mensagem");

     const msgCriada = await resMsg.json();

     const fd = new FormData();
     fd.append("imagem", file);

     const resImg = await fetch(
       `${API}/api/mensagemchat/${msgCriada.id}/imagem`,
       { method: "POST", body: fd }
     );
     if (!resImg.ok) throw new Error("Falha ao enviar imagem");

     const msgComImagem = await resImg.json();

     setMensagens((prev) => [
       ...prev,
       {
         id: msgComImagem.id,
         texto: msgComImagem.imagem,
         autor: mapMensagemParaAutor({ remetente: { id: meuId } }),
       },
     ]);

     bottomRef.current?.scrollIntoView({ behavior: "smooth" });
   } catch (err) {
     console.error(err);
     alert("Erro ao enviar imagem.");
   } finally {
     e.target.value = "";
     setEnviando(false);
   }
 };


  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      enviarMensagem();
    }
  };

  /* ---------- polling a cada 3s ---------- */
  useEffect(() => {
    if (conversaAtivaId) {
      buscarMensagens(conversaAtivaId);

      const t = setInterval(() => {
        if (conversaAtivaId && document.visibilityState === "visible") {
          buscarMensagens(conversaAtivaId);
        }
      }, 1000);

      return () => clearInterval(t);
    }
  }, [conversaAtivaId]);

  /* ---------- render ---------- */
  return (
    <div className={styles.containerMensagens}>
      <SidebarMensagens
        conversas={conversas}
                onSelecionarConversa={handleSelecionarConversa}
                conversaAtivaId={conversaAtivaId}
      />

      <div className={styles.chatBox}>
        {conversaAtivaId ? (
          <>
            <div className={styles.chatBody}>
              <section className={styles.reply_container}>


                {solicitacaoCliente && (
                  <div className={styles.solicitacaoInfo}>
                    <h4>{solicitacaoCliente.nomeUsuario}</h4>
                    <p>{solicitacaoCliente.descricao}</p>
                  </div>
                )}

                {imagensDestaque.length > 0 && (
                  <div className={styles.portfolioPreviewDestaque}>
                    <h4>Portfolio</h4>
                    <div className={styles.imagensLinha}>
                      {imagensDestaque.map((img) => (
                        <img
                          key={img.id}
                          src={`${API}/api/portfolioimgs/imagem/${img.imagem}`}
                          alt="Arte do portfólio"
                          className={styles.imgPortfolio}
                        />
                      ))}
                    </div>
                  </div>
                )}
              </section>

             {mensagens.map((msg) => {
               // Se usuário é artista, "eu" é remetente (mensagem enviada por ele)
               // Se usuário NÃO é artista, "eu" é destinatário, então quem enviou é "outro"
               const ehRemetente = (artista && msg.autor === "eu") || (!artista && msg.autor !== "eu");

               return (
                 <div
                   key={msg.id}
                   className={ehRemetente ? styles.mensagemArtista : styles.mensagemCliente}
                 >
                   {isImagem(msg.texto) ? (
                     <img
                       src={`${API}/uploads/mensagens/${msg.texto}`}
                       alt="Imagem enviada"
                       style={{ maxWidth: "200px", borderRadius: "10px" }}
                     />
                   ) : (
                     <p>{msg.texto}</p>
                   )}
                 </div>
               );
             })}

              <div ref={bottomRef} />
            </div>

            <div className={styles.inputBox}>
              <label className={styles.clipIcon}>
                <i className="fa-solid fa-paperclip"></i>
                <input
                  type="file"
                  onChange={handleUploadImagem}
                  style={{ display: "none" }}
                  disabled={enviando}
                />
              </label>

              <input
                type="text"
                value={novaMensagem}
                onChange={(e) => setNovaMensagem(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="Enviar mensagem..."
                disabled={enviando}
              />

              <button onClick={enviarMensagem} disabled={enviando}>
                {enviando ? (
                  <i className="fas fa-spinner fa-spin"></i>
                ) : (
                  <i className="fas fa-location-arrow"></i>
                )}
              </button>
            </div>
          </>
        ) : (
          <div className={styles.nenhumaConversa}>Selecione uma conversa</div>
        )}
      </div>
    </div>
  );
}